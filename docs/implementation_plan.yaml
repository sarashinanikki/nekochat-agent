title: AI情報共有チャットアシスタント - 詳細実装ステップ案

description: |
  このドキュメントは、AI情報共有チャットアシスタントプロジェクトの実装チーム向けの詳細な実装タスクプランです。
  環境構築、デプロイメント、APIキー管理などのインフラ関連タスクは、別途インフラチームが担当することを前提としています。
  全体的な開発計画は `docs/development_plan.yaml` を参照してください。

phases:
  - phase_number: 1
    phase_name: コア機能開発 (Proof of Concept 実装)
    objective: |
      Discord APIからデータを取得し、基本的なAI解説をWeb UIに表示する最小限の動くシステムを実装する。
      このフェーズでは、主要な技術要素が連携して動作することを確認することが目標です。
    tasks:
      - task_id: 1.1.1
        category: Next.js (フロントエンドUI)
        title: 分析リクエストUIの実装
        details:
          - **画面作成:** 分析対象（チャンネルID、期間など）を入力するためのシンプルなフォーム画面を作成します。
            - Tip: `useState`フックでフォームの入力値を管理しましょう。
          - **API連携準備:** 分析実行ボタンを設置し、ボタンクリック時にバックエンドのSupabase Functionを呼び出すための非同期処理の枠組みを準備します (例: `async/await` を使った関数)。
            - Why: ユーザーが分析を指示できるようにするため。
      - task_id: 1.2.1
        category: Supabase Function (Discordメッセージ取得ロジック)
        title: Discordメッセージ取得関数の実装
        details:
          - **関数定義:** 指定されたチャンネルIDと期間に基づき、Discordからメッセージを取得するTypeScript/JavaScriptの関数ロジックを記述します。
            - Tool: `discord.js`ライブラリの基本的な使い方を調査し、メッセージ取得処理を実装します。
          - **パラメータ処理:** 関数が受け取るパラメータ（チャンネルID、期間、取得件数など）を正しく処理できるようにします。
          - **データ整形:** 取得したDiscordメッセージデータを、後続のMastraエージェントが扱いやすいJSON形式に整形します。
            - Example: メッセージID, 送信者名, 本文, 送信日時などを含むオブジェクトの配列。
          - **エラーハンドリング(基本):** Discord API呼び出し時の基本的なエラー（例: チャンネルが見つからない、権限がない）を検知し、適切なエラー情報を返すようにします。
            - Why: Discordから情報を取得するコアロジックのため。
      - task_id: 1.3.1
        category: Mastra AI Agent (コアロジック)
        title: 基本AI解説エージェントの実装
        details:
          - **エージェント処理フロー定義:** 「Discordメッセージ取得 → Gemini APIで解説 → 結果を整形」という一連の処理フローをコードで定義します。
          - **Discordデータ取得連携:** 上記1.2.1で実装するSupabase Functionを呼び出し、Discordメッセージデータを取得する処理を実装します。
          - **Gemini API連携 (解説):** 取得したメッセージデータを基に、Gemini APIに「この会話を簡潔に解説してください」といった初期プロンプトを送信し、解説文を取得する処理を実装します。
            - Tip: Gemini APIのSDKやHTTPクライアントライブラリを利用します。APIキーは環境変数経由で安全に扱います（設定はインフラチーム担当）。
          - **結果整形:** Gemini APIから得られた解説文を、フロントエンドで表示しやすいシンプルな形式（例: テキスト文字列）に整形します。
          - **エラーハンドリング(基本):** Gemini API呼び出し時のエラーをハンドリングします。
            - Why: AIによる分析処理の中核を担うため。
      - task_id: 1.3.2
        category: Supabase Function (Mastraエージェント呼び出しAPI)
        title: UIからMastraエージェントを呼び出すためのAPI実装
        details:
          - **関数定義:** Next.jsフロントエンドからのリクエストを受け付け、上記1.3.1で実装したMastraエージェントの処理を起動するSupabase Functionを実装します。
          - **リクエスト・レスポンス処理:** フロントエンドからの入力（チャンネルID、期間など）をMastraエージェントに渡し、エージェントからの処理結果（解説文）をフロントエンドに返却します。
            - Why: フロントエンドとAIエージェントを繋ぐため。
      - task_id: 1.1.2
        category: Next.js (フロントエンドUI)
        title: 分析結果表示UIとAPI連携の実装
        details:
          - **API呼び出し実装:** 分析実行ボタンクリック時に、上記1.3.2で実装したSupabase Functionを呼び出し、AIによる解説結果を取得する処理を実装します。
            - Tool: `axios` や `fetch` APIを利用します。
          - **結果表示:** 取得した解説文を画面に表示するシンプルなコンポーネントを作成します。
          - **状態管理:** APIリクエスト中のローディング状態や、エラー発生時のメッセージを画面に表示する処理を実装します。
            - Tip: `useState` や `useEffect` フックを効果的に使いましょう。
            - Why: ユーザーがAIの分析結果を見れるようにするため。
      - task_id: 1.4.1
        category: テスト (実装者担当分)
        title: 実装機能の単体テスト・結合テスト
        details:
          - **単体テスト:** 各Supabase Functionのロジック、Mastraエージェントの主要な処理単位、Next.jsのUIコンポーネントやロジックに対して、基本的な単体テストを作成します。
            - Tool: Jest, Vitest, React Testing Libraryなど。
          - **結合テスト(ローカル):** フロントエンドからリクエストを送信し、Supabase Functions、Mastraエージェント、Gemini API連携を経て、結果がフロントエンドに表示されるまでの一連の流れをローカル環境でテストします。
            - Why: 実装した機能が正しく動作することを保証するため。

  - phase_number: 2
    phase_name: 情報整理・調査機能の実装 (段階的)
    objective: |
      AIによる会話のキーワード抽出、トピック分類、外部情報源を利用した調査解説といった、より高度な分析機能を実装する。
    tasks:
      - task_id: 2.1.1
        category: Mastra AI Agent & Gemini API
        title: キーワード抽出機能の実装
        details:
          - **プロンプト設計:** Gemini APIに対し、会話データから重要なキーワードを複数抽出させるためのプロンプトを設計・改良します。
          - **エージェントロジック:** Mastraエージェント内で、このプロンプトを使ってGemini APIを呼び出し、キーワードリストを取得する処理を実装します。
            - Why: 会話の主要な点を把握しやすくするため。
      - task_id: 2.1.2
        category: Next.js (フロントエンドUI)
        title: キーワード表示UIの実装
        details:
          - **UIコンポーネント作成:** 抽出されたキーワードリストを画面に表示するためのコンポーネントを作成します。
            - Example: タグクラウド風、箇条書きリストなど。
            - Why: ユーザーが抽出されたキーワードを見れるようにするため。
      - task_id: 2.2.1
        category: Mastra AI Agent & Gemini API
        title: トピック分類機能の実装
        details:
          - **プロンプト設計:** Gemini APIに対し、会話全体の主要なトピックを3〜5個程度に分類させるためのプロンプトを設計・改良します。
          - **エージェントロジック:** Mastraエージェント内で、このプロンプトを使ってGemini APIを呼び出し、トピックリストを取得する処理を実装します。
            - Why: 会話の全体像を掴みやすくするため。
      - task_id: 2.2.2
        category: Next.js (フロントエンドUI)
        title: トピック表示UIの実装
        details:
          - **UIコンポーネント作成:** 分類されたトピックリストを画面に表示するためのコンポーネントを作成します。
            - Why: ユーザーが会話のトピックを理解しやすくするため。
      - task_id: 2.3.1
        category: Mastra AI Agent (調査機能)
        title: 外部検索API連携による情報調査ロジックの実装
        details:
          - **キーワード特定:** 会話内容から、外部情報調査の対象となりそうなキーワードや質問を特定するロジックを検討・実装します（初期はユーザーが手動でキーワードを指定する形でも可）。
          - **外部検索API呼び出し:** 特定したキーワードで外部検索API（例: Google Custom Search API, SerpApiなど。APIの利用契約やキー設定はインフラチーム担当）を呼び出し、検索結果（URLリスト、スニペット等）を取得する処理を実装します。
            - Tip: 外部APIのレート制限やエラーハンドリングに注意しましょう。
          - **Gemini API連携 (調査結果統合):** 取得した検索結果（特にスニペット）を元の会話内容と合わせてGemini APIに渡し、関連性の高い情報を要約・解説させるためのプロンプトを設計・実装します。
            - Why: 会話だけでは不足する情報を補い、より深い理解を促すため。
      - task_id: 2.3.2
        category: Next.js (フロントエンドUI)
        title: 調査結果表示UIの実装
        details:
          - **UIコンポーネント作成:** AIによる調査・解説結果（補足情報、参照元URLなど）を分かりやすく表示するためのコンポーネントを作成します。
            - Why: ユーザーが調査結果を簡単に確認できるようにするため。
      - task_id: 2.4.1
        category: テスト (実装者担当分)
        title: 追加機能の単体テスト・結合テスト
        details:
          - 情報整理機能（キーワード抽出、トピック分類）、情報調査機能に関するMastraエージェントのロジック、およびNext.jsのUIコンポーネントに対して単体テストを作成・拡充します。
          - 新機能を含めた一連のフローの結合テストを実施します。
            - Why: 新機能の品質を保証するため。

  - phase_number: 3
    phase_name: 機能拡充と堅牢性の向上 (実装)
    objective: |
      ユーザー認証機能の実装、エラーハンドリングとロギングの強化（コードレベル）、データ取得処理の改善などを行い、システムの信頼性と使い勝手を向上させる。
    tasks:
      - task_id: 3.1.1
        category: Next.js (フロントエンドUI) & Supabase Auth
        title: ユーザー認証UIおよびロジックの実装
        details:
          - **認証UI作成:** サインアップ、ログイン、ログアウトを行うためのフォームコンポーネントを作成します。
          - **Supabase Auth連携:** Supabaseのクライアントライブラリ (例: `@supabase/auth-helpers-nextjs`) を用いて、ユーザー登録、ログイン、ログアウト、セッション管理といった認証処理をフロントエンドに実装します。
          - **ルート保護:** 認証済みユーザーのみが分析機能を利用できるように、Next.jsのページやAPIルート（クライアントからの呼び出し箇所）へのアクセス制御を実装します。
            - Tip: ミドルウェアやHigher Order Components (HOC) の活用を検討しましょう。
            - Why: 特定のユーザーのみがサービスを利用できるようにするため。
      - task_id: 3.2.1
        category: コード全体 (フロントエンド & バックエンドロジック)
        title: エラーハンドリングとロギングの強化 (コード記述)
        details:
          - **フロントエンド (Next.js):** API通信エラーや予期せぬJavaScriptエラー発生時に、ユーザーに分かりやすいエラーメッセージを表示するように改善します。開発者向けには、より詳細なエラー情報をブラウザのコンソールに出力します。
          - **バックエンド (Supabase Functions, Mastraエージェント):** 各外部API呼び出し (Discord, Gemini, 外部検索) のエラーレスポンスをより詳細にハンドリングし、具体的なエラー内容を示すログメッセージをコード内に追加します (ログの閲覧や集約はインフラチーム担当)。処理の継続が困難な場合は、フロントエンドに適切なエラーステータスとメッセージを返すようにします。
            - Why: 問題発生時の原因特定を容易にし、ユーザー体験の低下を防ぐため。
      - task_id: 3.3.1
        category: Supabase Function (Discordメッセージ取得ロジック)
        title: Discordメッセージ取得処理の改善 (ページネーション等)
        details:
          - **ページネーション実装:** Discord APIで一度に取得できるメッセージ数には上限があるため、長期間の会話や大量のメッセージを安定して全て取得できるように、ページネーション処理を堅牢に実装します。
            - Tip: `discord.js` のメッセージ取得機能のオプションや、APIのレスポンスに含まれる情報を活用します。
          - **フィルタリングロジック追加:** UIから指定された新しいフィルタリング条件（例: 特定ユーザーの発言のみ、特定リアクションが付いたメッセージ）に基づき、メッセージを取得・選別するロジックを関数内に追加します。
            - Why: 大量のデータも扱えるようにし、より柔軟なデータ取得を可能にするため。
      - task_id: 3.3.2
        category: Next.js (フロントエンドUI)
        title: 高度なフィルタリングUIの実装
        details:
          - **UI要素追加:** 上記3.3.1で対応する新しいフィルタリング条件（ユーザー選択、リアクション選択など）をユーザーが指定できるUI要素を分析リクエストフォームに追加します。
          - **API連携更新:** 新しいフィルター条件をバックエンドのSupabase Functionに渡すように、API呼び出し部分のコードを更新します。
            - Why: ユーザーがより細かく分析対象を絞り込めるようにするため。
      - task_id: 3.4.1
        category: Mastra AI Agent & Supabase Functions
        title: アプリケーションレベルのキャッシュ戦略検討と簡易実装 (コード)
        details:
          - **キャッシュ検討:** 頻繁にリクエストされる同一条件の分析結果や、Discordから取得したメッセージデータについて、キャッシュ戦略を検討します。
          - **簡易実装(オプション):** 例えば、Supabase Functionsのインメモリキャッシュや、Supabase DBのテーブルを利用した簡易的なキャッシュ機構を実装し、外部APIへのリクエスト回数削減やレスポンス速度向上を目指します。
            - Caution: キャッシュの有効期限や更新戦略も考慮が必要です。
            - Why: パフォーマンス向上とAPI利用コスト削減のため。
      - task_id: 3.5.1
        category: テスト (実装者担当分)
        title: 拡充機能の単体テスト・結合テスト
        details:
          - ユーザー認証、エラーハンドリング改善箇所、データ取得・フィルタリング改善箇所、キャッシュロジックなど、新たに追加・変更した機能に対して単体テストを作成・拡充します。
          - 認証状態を含めた結合テストシナリオを追加・実施します。
            - Why: システムの信頼性を高めるため。

  - phase_number: 4
    phase_name: 高度なAI機能とUI/UXの改善 (実装)
    objective: |
      マインドマップ風表示やQ&Aリスト生成といったより高度な情報整理機能、対話的な深掘りUI、ユーザーフィードバック機構などを実装し、ユーザー体験を大幅に向上させる。
    tasks:
      - task_id: 4.1.1
        category: Next.js (フロントエンドUI)
        title: UI/UX全般の改善実装
        details:
          - 既存ユーザーからのフィードバックやユーザビリティテストの結果に基づき、UI全体のデザイン調整、ナビゲーション改善、情報表示方法の変更などを実装します。
          - レポート表示コンポーネントを改修し、情報のグルーピング、重要なポイントのハイライト、長文コンテンツの折りたたみ表示などを実装して見やすさを向上させます。
          - CSSやコンポーネント設計を見直し、レスポンシブデザインを強化して、スマートフォンやタブレットでの表示を改善します。
            - Why: ユーザーがより快適にシステムを利用できるようにするため。
      - task_id: 4.2.1
        category: Mastra AI Agent & Gemini API
        title: マインドマップ風表示のための構造化データ生成ロジック
        details:
          - **プロンプト設計:** Gemini APIに対し、会話データから主要な論点やトピック間の関連性を抽出し、マインドマップとして表現可能な構造化データ（例: JSON形式でノードとエッジのリスト）を出力させるためのプロンプトを設計・実装します。
            - Why: 複雑な議論を視覚的に分かりやすくするため。
      - task_id: 4.2.2
        category: Next.js (フロントエンドUI)
        title: マインドマップ風表示UIの実装
        details:
          - **描画ライブラリ導入:** `Mermaid.js`, `react-flow`などのJavaScriptライブラリを選定し、Next.jsプロジェクトに導入します。
          - **UIコンポーネント作成:** 上記4.2.1でMastraエージェントが生成した構造化データを入力として受け取り、マインドマップを描画するReactコンポーネントを実装します。
            - Why: ユーザーが議論の構造を視覚的に理解できるようにするため。
      - task_id: 4.2.3
        category: Mastra AI Agent & Gemini API
        title: Q&Aリスト自動生成ロジック
        details:
          - **プロンプト設計:** Gemini APIに対し、会話データから主要な質問とそれに対する回答のペアを抽出・生成させるためのプロンプトを設計・実装します。
          - **エージェントロジック:** Mastraエージェント内でこの処理を実行し、Q&Aリストを取得する機能を実装します。
            - Why: 会話の中の重要なQ&Aを効率的に把握できるようにするため。
      - task_id: 4.2.4
        category: Next.js (フロントエンドUI)
        title: Q&Aリスト表示UIの実装
        details:
          - **UIコンポーネント作成:** 生成されたQ&Aリストを、質問と回答が対になった形式で分かりやすく表示するコンポーネントを実装します。
            - Example: アコーディオンUIで回答を展開できるようにするなど。
            - Why: ユーザーがQ&Aを簡単に見つけられるようにするため。
      - task_id: 4.3.1
        category: Next.js (フロントエンドUI) & Mastra AI Agent
        title: 対話的な深掘りUIと連携ロジックの実装
        details:
          - **UI実装:** 生成されたレポートの特定部分（例: 特定のトピック、キーワード、解説文）について、ユーザーが追加の質問を入力したり、より詳細な解説を要求したりできるUI要素（例: 「さらに詳しく」ボタン、質問入力フィールド）を実装します。
          - **エージェント連携:** ユーザーからの追加リクエストを受け取り、関連する会話の文脈や元のレポート内容を添えて再度Mastraエージェント（ひいてはGemini API）に問い合わせるロジックを実装します。
          - (検討) チャット形式のインターフェースを導入する場合は、そのUIコンポーネント群と状態管理ロジックを実装します。
            - Why: ユーザーがAIと対話しながら、より深く情報を理解できるようにするため。
      - task_id: 4.4.1
        category: Next.js (フロントエンドUI)
        title: ユーザーフィードバックUIの実装
        details:
          - **UIコンポーネント作成:** AIが生成したレポートや各機能の出力結果に対して、ユーザーが評価（例: 5段階評価、良い/悪いボタン）や具体的なコメントを残せるUIコンポーネントを実装します。
            - Why: ユーザーからのフィードバックを収集し、サービス改善に繋げるため。
      - task_id: 4.4.2
        category: Supabase Function (バックエンドロジック)
        title: ユーザーフィードバック保存機能の実装
        details:
          - **関数定義:** フロントエンドから送信されたフィードバックデータ（評価、コメント、対象レポートIDなど）を受け取り、Supabase DBの専用テーブルに保存するSupabase Functionを実装します。
            - Tip: 保存するデータの構造を事前に定義しておきましょう。
            - Why: 収集したフィードバックを永続化するため。
      - task_id: 4.5.1
        category: テスト (実装者担当分)
        title: 高度機能の単体テスト・結合テスト
        details:
          - マインドマップ生成・表示、Q&Aリスト生成・表示、対話的深掘りUI、ユーザーフィードバック機構など、新たに追加した高度な機能群に対して単体テストおよび結合テストを作成・実施します。
            - Why: 複雑な機能の品質を保証するため。

  - phase_number: 5
    phase_name: テスト・評価・継続的改善 (実装関連タスク)
    objective: |
      実装チームとして、コード品質の向上、AI出力の改善、ユーザビリティ向上に貢献するための実装作業を行う。
    tasks:
      - task_id: 5.1.1
        category: テストコード開発
        title: 単体テスト・結合テスト・E2Eテストスクリプトの実装と拡充
        details:
          - **単体テスト:** Supabase Functionsのロジック、Mastraエージェントの各モジュール、Next.jsのUIコンポーネントやカスタムフックに対して、テストケースを網羅的に作成・拡充します (Jest, Vitest, React Testing Library等)。
          - **結合テスト:** データ取得からUI表示まで、主要な機能単位での一連のフローをテストするスクリプトを作成・拡充します。
          - **E2Eテストスクリプト(検討・実装):** Playwright, Cypress等を用いた主要なユーザーシナリオの自動テストスクリプトの実装を検討し、可能な範囲で進めます（E2Eテストの実行環境構築はインフラチーム担当）。
          - テストカバレッジを計測し、目標値を設定してカバレッジ向上を目指します。
            - Why: コードの品質を維持し、リグレッションを早期に発見するため。
      - task_id: 5.2.1
        category: Mastra AI Agent & Gemini API
        title: AI出力品質改善のためのプロンプトエンジニアリングとロジック修正
        details:
          - **評価スクリプト作成(オプション):** AIの出力（解説、整理、調査結果）の品質を部分的にでも自動評価できるようなスクリプトの作成を試みます。
          - **プロンプト改善:** 手動評価やスクリプト評価の結果に基づき、Gemini APIに送信するプロンプトを継続的に改善し、より正確で分かりやすい出力を目指します。
          - **エージェントロジック修正:** 必要に応じて、Mastraエージェント内のデータ処理ロジックや制御フローを修正し、AIの出力品質向上を図ります。
            - Why: AIアシスタントの根幹である情報提供の質を高めるため。
      - task_id: 5.3.1
        category: Next.js (フロントエンドUI)
        title: ユーザビリティテスト結果に基づくUI改善実装
        details:
          - ユーザビリティテストで特定された課題点（例: 操作が分かりにくい、情報が見つけにくい等）を解決するための具体的なUI変更を実装します。
            - Why: ユーザーが直感的かつ効率的にシステムを使えるようにするため。
      - task_id: 5.4.1
        category: コード全体 (フロントエンド & バックエンドロジック)
        title: コードレベルでのパフォーマンス最適化実装
        details:
          - **フロントエンド (Next.js):** Reactコンポーネントのレンダリング最適化（例: `React.memo`, `useCallback`, `useMemo`の適切な使用）、不要な再レンダリングの削減、コード分割（ダイナミックインポート）、画像最適化などを実装します。
          - **バックエンド (Supabase Functions):** ボトルネックとなっている処理ロジックを見直し、アルゴリズム改善や非同期処理の効率化など、コードレベルでのパフォーマンス改善を実装します。
          - Supabase DBへのクエリ（Supabaseクライアントライブラリ経由で記述されたもの）の実行計画を確認し、必要に応じてクエリの書き方を見直します。
            - Why: システムの応答性を高め、快適なユーザー体験を提供するため。
      - task_id: 5.5.1
        category: ドキュメンテーション (実装関連)
        title: コードコメント、README、API仕様などのドキュメント作成・更新
        details:
          - 実装したコード（特に複雑なロジックやコンポーネント）に対して、他の開発者が理解しやすいように適切なコメントを記述します。
          - 主要なモジュールや機能単位で、その目的や使い方を説明するREADMEファイルを作成・更新します。
          - Supabase FunctionsのAPIエンドポイントについて、リクエストパラメータやレスポンス形式などの仕様をドキュメント化します（例: Swagger/OpenAPI形式の利用検討）。
            - Why: コードの保守性を高め、チーム内の知識共有を促進するため。

# 注意事項:
# - このプランは実装タスクに特化しています。インフラ設定、CI/CDパイプライン構築、本番環境の監視設定などはインフラチームの担当範囲です。
# - 各タスクの見積もり工数や優先順位は、プロジェクトの状況に応じて適宜見直してください。
# - ジュニアエンジニアの方は、不明な点や難しいと感じるタスクがあれば、遠慮なくシニアエンジニアやチームリーダーに相談しましょう。
