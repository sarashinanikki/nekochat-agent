title: AI情報共有チャットアシスタント - 詳細開発ステップ案

description: ジュニアエンジニアがプロジェクトを進めるための詳細な開発ステップ。各フェーズは具体的なタスクに分解されています。

phases:
  - phase_number: 1
    phase_name: コア機能開発 (Proof of Concept)
    objective: |
      Discord API直接連携によるデータ取得モジュール (Supabase Functions) と、
      基本的なAI解説機能 (Mastra + Gemini) をWeb UI (Next.js) 上で動作させる最小限のシステムを構築する。
    tasks:
      - task_id: 1.1
        category: 環境構築 & 初期設定
        details:
          - Supabaseプロジェクトセットアップ (Database, Auth, Functionsの有効化)
          - Next.jsプロジェクト初期構築 (TypeScriptベース)
          - Mastra AIエージェントフレームワークの調査とプロジェクトへの導入準備
          - Discordアプリケーション作成とBotトークンの取得
          - Gemini APIキーの取得と安全な管理方法の確立
          - 開発環境（ローカル、Supabase）での環境変数設定 (.envファイル、Supabase環境変数設定)
          - Gitリポジトリの初期設定とブランチ戦略の決定
      - task_id: 1.2
        category: Supabase Function - Discordメッセージ取得機能
        details:
          - `discord.js` を利用したDiscord API連携の基本実装（特定チャンネルのメッセージを指定件数取得）
          - 取得ロジックをSupabase Functionとして実装・デプロイ
          - Functionの動作テスト（curlやSupabaseクライアントライブラリ経由）
          - 取得対象のチャンネルID、期間（開始日時・終了日時）、件数などをパラメータで指定可能にする
          - Discord APIエラー、権限エラー等の基本的なエラーハンドリング実装
          - 取得したメッセージデータをMastraが扱いやすいJSON形式に整形する処理
      - task_id: 1.3
        category: Mastraエージェント - 基本AI解説ロジック
        details:
          - Mastraエージェントの基本的な処理フロー（プロンプト定義、API連携、結果整形）のスケルトン作成
          - 上記1.2で作成したSupabase Function (Discordメッセージ取得) を呼び出す処理の実装
          - 取得したメッセージデータを基に、Gemini APIに送信する初期プロンプトの設計と実装（例：「以下の会話を簡潔に解説してください」）
          - Gemini APIへのリクエスト送信、レスポンス受信、エラーハンドリングの実装
          - Geminiからの解説結果を扱いやすい形式（例：テキスト）に整形する処理
          - Mastraエージェントを呼び出すためのSupabase Function (UI向けAPI) のエンドポイント作成
      - task_id: 1.4
        category: Next.js UI - リクエスト送信と結果表示
        details:
          - UIの基本レイアウト作成 (ヘッダー、サイドバー、メインコンテンツエリア等)
          - 分析リクエスト用フォーム作成 (チャンネルID入力、期間選択UIなど)
          - 「分析実行」ボタン押下時に、1.3で作成したSupabase Function (UI向けAPI) へリクエストを送信する処理の実装 (axiosやfetch API利用)
          - Mastraエージェントからの解説結果を画面に表示するコンポーネント作成
          - リクエスト中のローディング状態表示、エラー発生時のメッセージ表示の実装
      - task_id: 1.5
        category: 統合とPoCデモンストレーション
        details:
          - 各コンポーネント (Next.js UI, Supabase Functions, Mastra Agent, Discord API, Gemini API) を連携させた一連の動作テスト
          - 開発チーム内でのPoCデモンストレーションとフィードバック収集

  - phase_number: 2
    phase_name: 情報整理・調査機能の段階的追加
    objective: |
      キーワード抽出、トピック分類などの基本的な整理機能を追加する。
      限定的な範囲での外部情報検索と組み合わせた調査・解説機能を開発する。
    tasks:
      - task_id: 2.1
        category: 情報整理機能 (Mastraエージェント & Gemini API)
        details:
          - **キーワード抽出:** Gemini APIのプロンプトを改良し、会話から主要なキーワードを複数抽出させるロジックをMastraエージェントに実装。抽出結果をUIに表示。
          - **トピック分類 (簡易):** Gemini APIを活用し、会話の主要トピックを3-5個程度に分類させるロジックをMastraエージェントに実装。分類結果をUIに表示。
          - UI側で整理結果（キーワード、トピック）の表示方法を検討・実装。
      - task_id: 2.2
        category: 情報調査機能 (Mastraエージェント & 外部検索API)
        details:
          - 外部検索APIの選定 (例: Google Custom Search API, SerpApi等) とAPIキーの取得・設定。
          - 会話内容から調査対象となりそうなキーワードや質問を特定するロジックをMastraエージェントに検討・実装 (初期はユーザーが指定するキーワードでも可)。
          - 特定したキーワードで外部検索APIを呼び出し、検索結果のURLリストやスニペットを取得する処理をMastraエージェントに実装。
          - 取得した検索結果（特にスニペット）を元の会話内容と合わせてGemini APIに渡し、関連性の高い情報を要約・解説させるプロンプト設計と実装。
          - UI側で調査結果（補足情報、参照元URLなど）を分かりやすく表示する方法を検討・実装。

  - phase_number: 3
    phase_name: 機能拡充と堅牢化
    objective: |
      Supabase Authを利用したユーザー認証の実装、エラーハンドリングとロギングの強化、
      データ取得やフィルタリング機能の改善を通じて、システムの信頼性と使い勝手を向上させる。
    tasks:
      - task_id: 3.1
        category: ユーザー認証 (Supabase Auth & Next.js)
        details:
          - Supabase Authの有効化と設定 (例: メール/パスワード認証)。
          - Next.js側での認証関連UIコンポーネント作成 (サインアップ、ログイン、ログアウトフォーム)。
          - Supabaseクライアントライブラリを用いた認証処理の実装 (ユーザー登録、ログイン、ログアウト、セッション管理)。
          - 認証済みユーザーのみが分析機能を利用できるよう、Next.jsのページやAPIルートへのアクセス制御を実装。
          - (任意) ユーザープロファイル情報（例：DiscordユーザーIDとの紐付け）をSupabase DBに保存・管理する機能。
      - task_id: 3.2
        category: エラーハンドリングとロギングの強化
        details:
          - **フロントエンド (Next.js):** API通信エラー、予期せぬエラー発生時にユーザーフレンドリーなエラーメッセージを表示。必要に応じてエラー詳細をコンソールに出力。
          - **バックエンド (Supabase Functions, Mastra):** 各API呼び出し (Discord, Gemini, 外部検索) のエラーレスポンスを詳細にハンドリングし、具体的なエラー内容をログに出力。処理の継続が困難な場合は適切なエラーをクライアントに返す。
          - Supabase Functionsのログ機能を活用し、処理の開始・終了、主要なステップ、エラー発生時の情報を記録。
          - (検討) Sentry等の外部エラー監視ツールの導入検討。
      - task_id: 3.3
        category: データ取得とフィルタリングの改善
        details:
          - Discordメッセージ取得時のページネーション処理を堅牢化し、大量メッセージでも安定して取得できるようにする。
          - UIから取得対象のフィルタリングオプションを追加 (例: 特定ユーザーの発言のみ、特定リアクションが付いたメッセージなど)。MastraエージェントとSupabase Functionで対応。
          - (検討) データ取得のリアルタイム性向上: 現状のオンデマンド取得でユーザー体験上問題がないか評価。必要であれば、Discord Gateway APIの利用や定期ポーリング等の大規模改修を検討リストに入れる (このフェーズでは調査・検討まで)。
      - task_id: 3.4
        category: AIプラットフォームの処理能力・効率改善
        details:
          - Mastraエージェント内の処理フローを見直し、不要な処理の削除や非同期処理の適切な活用による効率化。
          - Gemini APIへのリクエスト内容（プロンプト、会話データ量）を最適化し、トークン消費量と処理時間のバランスを改善。
          - (検討) 頻繁にリクエストされる同一条件の分析結果や、Discordから取得したメッセージデータに対するキャッシュ戦略の検討と簡易的な実装 (例: Supabase FunctionsのインメモリキャッシュやSupabase DBを利用)。

  - phase_number: 4
    phase_name: 高度なAI機能とUI/UXの改善
    objective: |
      より複雑な情報整理機能（マインドマップ風表示など）、ユーザーフィードバック機構の実装、
      対話的な深掘りUIの改善を通じて、ユーザー体験を大幅に向上させる。
    tasks:
      - task_id: 4.1
        category: UI/UX全般の改善
        details:
          - 既存ユーザーからのフィードバックやユーザビリティテストの結果に基づき、UI全体のデザイン、ナビゲーション、情報表示方法を改善。
          - レポート表示の見やすさ向上 (情報のグルーピング、重要なポイントのハイライト、長文コンテンツの折りたたみ表示など)。
          - レスポンシブデザインを強化し、スマートフォンやタブレットでの利用体験を向上。
      - task_id: 4.2
        category: 高度な情報整理機能の実装
        details:
          - **マインドマップ風表示:** Gemini APIで抽出した論点やトピック間の関連性を構造化データ (例: JSON) として出力させるプロンプトを設計。Next.js上でMermaid.js, react-flow等のライブラリを用いて視覚的に表示する機能をプロトタイピング・実装。
          - **Q&Aリスト自動生成:** 会話データから主要な質問とそれに対する回答のペアをGemini APIで抽出・生成させるロジックをMastraエージェントに実装。UIでQ&A形式で表示。
      - task_id: 4.3
        category: 対話的な深掘りUIの改善
        details:
          - 生成されたレポートの特定部分（例：特定のトピック、キーワード、解説文）について、ユーザーが追加の質問やより詳細な解説をAIに要求できる機能を実装。
          - (検討) チャット形式のインターフェースを導入し、AIとの対話を通じて情報を深掘りできるようにする。
      - task_id: 4.4
        category: ユーザーフィードバック機構の実装
        details:
          - AIが生成したレポートや各機能の出力結果に対して、ユーザーが評価（例：5段階評価、良い/悪いボタン）や具体的なコメントを残せるUIを実装。
          - 収集したフィードバックをSupabase DBに保存し、開発チームが内容を確認・分析できる簡易的な管理画面または仕組みを準備。

  - phase_number: 5
    phase_name: テスト・評価・継続的改善
    objective: |
      品質保証活動を通じてシステムの信頼性を高めるとともに、ユーザー評価に基づいた継続的な改善サイクルを確立する。
    tasks:
      - task_id: 5.1
        category: テスト戦略の策定と実施
        details:
          - **単体テスト:** Supabase Functionsの主要ロジック、Mastraエージェントのコア機能、Next.jsの主要コンポーネントやカスタムフックに対してテストを作成 (例: Jest, Vitest)。
          - **結合テスト:** データ取得からUI表示まで、主要な機能単位での一連のフローをテスト。
          - **E2Eテスト (検討):** Playwright, Cypress等を用いた主要なユーザーシナリオの自動テスト導入を検討し、可能な範囲で実装。
          - テストカバレッジの計測と向上。
      - task_id: 5.2
        category: AI出力品質評価プロセスの確立
        details:
          - AIの出力（解説、整理、調査結果）に対する評価基準（正確性、網羅性、一貫性、分かりやすさ等）を定義。
          - 様々なパターンの会話データを用意し、それらに対するAI出力を定期的に評価。手動評価と、可能であれば自動評価スクリプトの作成。
          - 評価結果に基づき、Gemini APIのプロンプトやMastraエージェントのロジックを継続的に改善。
      - task_id: 5.3
        category: ユーザビリティテストの実施
        details:
          - 実際のターゲットユーザー（友人など）にシステムを使ってもらい、タスクベースのユーザビリティテストを実施。
          - 操作性、分かりやすさ、機能の満足度などに関するフィードバックを収集し、課題点を特定。
      - task_id: 5.4
        category: パフォーマンス測定と最適化
        details:
          - 主要機能（分析リクエストから結果表示まで）のレスポンスタイムを定期的に測定。
          - Next.jsのビルドサイズやロード時間の最適化 (コード分割、画像最適化など)。
          - Supabase DBのクエリパフォーマンス分析と最適化 (インデックス追加など)。
          - ボトルネックとなっている箇所を特定し、改善策を実施。
      - task_id: 5.5
        category: 継続的な改善サイクルの確立
        details:
          - 定期的なチームミーティングで、テスト結果、AI出力評価、ユーザーフィードバックを共有。
          - 改善タスクの洗い出し、優先順位付け、開発バックログへの追加。
          - 短いイテレーションでの開発・リリースサイクルの確立 (例: 2週間スプリント)。
          - ドキュメント（設計書、API仕様、開発手順など）の継続的な更新。
